datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique @db.VarChar(255)
  phone        String?  @db.VarChar(10)
  password     String
  avatar       String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Registration {
  id                    Int                    @id @default(autoincrement())
  applicantName         String?
  scheme                Scheme?                @relation(fields: [schemeId], references: [id])
  schemeId              Int?
  email                 String?                @unique @db.VarChar(255)
  phone                 String?                @db.VarChar(10) // No regex here, handle validation in application logic
  postalAddress         String?
  DOB                   DateTime?
  gender                Gender? // Enum for gender
  category              Category? // Enum for category
  education             String?
  experience            String?
  resume                String? // S3 URL
  ideaDescription       String?
  conceptNote           String? // S3 URL
  aspectNote            String? // S3 URL
  schemeSpecificAnswers SchemeQuestionAnswer[] @relation
  evaluation            Evaluation?            @relation
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Scheme {
  id               Int              @id @default(autoincrement())
  schemeName       String           @unique
  startups         Startup[]        @relation
  registrations    Registration[]   @relation
  programManager   Manager?         @relation(fields: [programManagerId], references: [id])
  programManagerId Int?
  questions        SchemeQuestion[] @relation("SchemeQuestionRelation")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SchemeQuestion {
  id           Int                    @id @default(autoincrement())
  name         String?
  type         SchemeQuestionType?
  questionText String?
  options      String[]
  schemes      Scheme[]               @relation("SchemeQuestionRelation")
  answers      SchemeQuestionAnswer[] @relation
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model SchemeQuestionAnswer {
  id               Int             @id @default(autoincrement())
  question         SchemeQuestion? @relation(fields: [schemeQuestionId], references: [id])
  schemeQuestionId Int?
  answer           String?
  registration     Registration?   @relation(fields: [registrationId], references: [id])
  registrationId   Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Founder {
  id            Int       @id @default(autoincrement())
  name          String
  username      String    @unique
  password      String
  startups      Startup[] @relation
  email         String    @unique @db.VarChar(255)
  phone         String    @db.VarChar(10)
  postalAddress String?
  DOB           DateTime?
  gender        Gender?
  category      Category?
  education     String?
  experience    String?
  resume        String?
  avatar        String?
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Startup {
  id                 Int          @id @default(autoincrement())
  founder            Founder      @relation(fields: [founderId], references: [id])
  founderId          Int
  teamMembers        TeamMember[] @relation
  scheme             Scheme       @relation(fields: [schemeId], references: [id])
  schemeId           Int
  ideaDescription    String
  conceptNote        String
  aspectNote         String
  previousRecipient  YesNo
  fullCommitment     YesNo
  noOtherFellowship  YesNo
  businessCommitment YesNo
  noBeneficiary      YesNo
  registerPEP        YesNo
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  memberName  String
  startup     Startup  @relation(fields: [startupId], references: [id])
  startupId   Int
  memberEmail String   @unique @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Manager {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  managertype  ManagerType
  password     String
  email        String       @unique @db.VarChar(255)
  phone        String?      @db.VarChar(10)
  scheme       Scheme[]     @relation
  avatar       String?
  panelMember  PanelMember? @relation
  avatarId     Int?
  refreshToken String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Evaluation {
  id                Int             @id @default(autoincrement())
  registration      Registration    @relation(fields: [registrationId], references: [id])
  registrationId    Int             @unique
  panel             Panel           @relation(fields: [panelId], references: [id])
  panelId           Int             @unique
  evaluationSheet   EvaluationSheet @relation(fields: [evaluationSheetId], references: [id])
  evaluationSheetId Int             @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Panel {
  id           Int           @id @default(autoincrement())
  panelMembers PanelMember[] @relation
  evaluation   Evaluation?   @relation
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PanelMember {
  id         Int        @id @default(autoincrement())
  panel      Panel      @relation(fields: [panelId], references: [id])
  panelId    Int
  memberType MemberType
  manager    Manager?   @relation(fields: [managerId], references: [id])
  managerId  Int?       @unique
  guest      Guest?     @relation(fields: [guestId], references: [id])
  guestId    Int?       @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model EvaluationSheet {
  id         Int         @id @default(autoincrement())
  evaluation Evaluation? @relation
  questions  Question[]  @relation
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Question {
  id                Int             @id @default(autoincrement())
  questionText      String
  evaluatedMarks    String
  options           String[]
  evaluationSheet   EvaluationSheet @relation(fields: [evaluationSheetId], references: [id])
  evaluationSheetId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Guest {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique @db.VarChar(255)
  panelMember PanelMember? @relation
  phone       String       @db.VarChar(10)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ManagerType {
  program_manager
  incubation_manager
  investment_manager
}

enum Gender {
  male
  female
  prefernottosay
}

enum Category {
  general
  obc
  sc
  st
}

enum YesNo {
  yes
  no
}

enum MemberType {
  Manager
  Guest
}

enum SchemeQuestionType {
  smcq
  mmcq
  text
  link
  boolean
}
